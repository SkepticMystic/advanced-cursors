/*
THIS IS A GENERATED/BUNDLED FILE BY ROLLUP
if you want to view the source visit the plugins github repository
*/

'use strict';

var obsidian = require('obsidian');

/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

function noop() { }
function run(fn) {
    return fn();
}
function blank_object() {
    return Object.create(null);
}
function run_all(fns) {
    fns.forEach(run);
}
function is_function(thing) {
    return typeof thing === 'function';
}
function safe_not_equal(a, b) {
    return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');
}
function is_empty(obj) {
    return Object.keys(obj).length === 0;
}

function append(target, node) {
    target.appendChild(node);
}
function insert(target, node, anchor) {
    target.insertBefore(node, anchor || null);
}
function detach(node) {
    node.parentNode.removeChild(node);
}
function destroy_each(iterations, detaching) {
    for (let i = 0; i < iterations.length; i += 1) {
        if (iterations[i])
            iterations[i].d(detaching);
    }
}
function element(name) {
    return document.createElement(name);
}
function text(data) {
    return document.createTextNode(data);
}
function space() {
    return text(' ');
}
function listen(node, event, handler, options) {
    node.addEventListener(event, handler, options);
    return () => node.removeEventListener(event, handler, options);
}
function attr(node, attribute, value) {
    if (value == null)
        node.removeAttribute(attribute);
    else if (node.getAttribute(attribute) !== value)
        node.setAttribute(attribute, value);
}
function children(element) {
    return Array.from(element.childNodes);
}
function set_data(text, data) {
    data = '' + data;
    if (text.wholeText !== data)
        text.data = data;
}

let current_component;
function set_current_component(component) {
    current_component = component;
}
function get_current_component() {
    if (!current_component)
        throw new Error('Function called outside component initialization');
    return current_component;
}
function onMount(fn) {
    get_current_component().$$.on_mount.push(fn);
}

const dirty_components = [];
const binding_callbacks = [];
const render_callbacks = [];
const flush_callbacks = [];
const resolved_promise = Promise.resolve();
let update_scheduled = false;
function schedule_update() {
    if (!update_scheduled) {
        update_scheduled = true;
        resolved_promise.then(flush);
    }
}
function add_render_callback(fn) {
    render_callbacks.push(fn);
}
let flushing = false;
const seen_callbacks = new Set();
function flush() {
    if (flushing)
        return;
    flushing = true;
    do {
        // first, call beforeUpdate functions
        // and update components
        for (let i = 0; i < dirty_components.length; i += 1) {
            const component = dirty_components[i];
            set_current_component(component);
            update(component.$$);
        }
        set_current_component(null);
        dirty_components.length = 0;
        while (binding_callbacks.length)
            binding_callbacks.pop()();
        // then, once components are updated, call
        // afterUpdate functions. This may cause
        // subsequent updates...
        for (let i = 0; i < render_callbacks.length; i += 1) {
            const callback = render_callbacks[i];
            if (!seen_callbacks.has(callback)) {
                // ...so guard against infinite loops
                seen_callbacks.add(callback);
                callback();
            }
        }
        render_callbacks.length = 0;
    } while (dirty_components.length);
    while (flush_callbacks.length) {
        flush_callbacks.pop()();
    }
    update_scheduled = false;
    flushing = false;
    seen_callbacks.clear();
}
function update($$) {
    if ($$.fragment !== null) {
        $$.update();
        run_all($$.before_update);
        const dirty = $$.dirty;
        $$.dirty = [-1];
        $$.fragment && $$.fragment.p($$.ctx, dirty);
        $$.after_update.forEach(add_render_callback);
    }
}
const outroing = new Set();
function transition_in(block, local) {
    if (block && block.i) {
        outroing.delete(block);
        block.i(local);
    }
}
function mount_component(component, target, anchor, customElement) {
    const { fragment, on_mount, on_destroy, after_update } = component.$$;
    fragment && fragment.m(target, anchor);
    if (!customElement) {
        // onMount happens before the initial afterUpdate
        add_render_callback(() => {
            const new_on_destroy = on_mount.map(run).filter(is_function);
            if (on_destroy) {
                on_destroy.push(...new_on_destroy);
            }
            else {
                // Edge case - component was destroyed immediately,
                // most likely as a result of a binding initialising
                run_all(new_on_destroy);
            }
            component.$$.on_mount = [];
        });
    }
    after_update.forEach(add_render_callback);
}
function destroy_component(component, detaching) {
    const $$ = component.$$;
    if ($$.fragment !== null) {
        run_all($$.on_destroy);
        $$.fragment && $$.fragment.d(detaching);
        // TODO null out other refs, including component.$$ (but need to
        // preserve final state?)
        $$.on_destroy = $$.fragment = null;
        $$.ctx = [];
    }
}
function make_dirty(component, i) {
    if (component.$$.dirty[0] === -1) {
        dirty_components.push(component);
        schedule_update();
        component.$$.dirty.fill(0);
    }
    component.$$.dirty[(i / 31) | 0] |= (1 << (i % 31));
}
function init(component, options, instance, create_fragment, not_equal, props, dirty = [-1]) {
    const parent_component = current_component;
    set_current_component(component);
    const $$ = component.$$ = {
        fragment: null,
        ctx: null,
        // state
        props,
        update: noop,
        not_equal,
        bound: blank_object(),
        // lifecycle
        on_mount: [],
        on_destroy: [],
        on_disconnect: [],
        before_update: [],
        after_update: [],
        context: new Map(parent_component ? parent_component.$$.context : []),
        // everything else
        callbacks: blank_object(),
        dirty,
        skip_bound: false
    };
    let ready = false;
    $$.ctx = instance
        ? instance(component, options.props || {}, (i, ret, ...rest) => {
            const value = rest.length ? rest[0] : ret;
            if ($$.ctx && not_equal($$.ctx[i], $$.ctx[i] = value)) {
                if (!$$.skip_bound && $$.bound[i])
                    $$.bound[i](value);
                if (ready)
                    make_dirty(component, i);
            }
            return ret;
        })
        : [];
    $$.update();
    ready = true;
    run_all($$.before_update);
    // `false` as a special case of no DOM component
    $$.fragment = create_fragment ? create_fragment($$.ctx) : false;
    if (options.target) {
        if (options.hydrate) {
            const nodes = children(options.target);
            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
            $$.fragment && $$.fragment.l(nodes);
            nodes.forEach(detach);
        }
        else {
            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
            $$.fragment && $$.fragment.c();
        }
        if (options.intro)
            transition_in(component.$$.fragment);
        mount_component(component, options.target, options.anchor, options.customElement);
        flush();
    }
    set_current_component(parent_component);
}
/**
 * Base class for Svelte components. Used when dev=false.
 */
class SvelteComponent {
    $destroy() {
        destroy_component(this, 1);
        this.$destroy = noop;
    }
    $on(type, callback) {
        const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));
        callbacks.push(callback);
        return () => {
            const index = callbacks.indexOf(callback);
            if (index !== -1)
                callbacks.splice(index, 1);
        };
    }
    $set($$props) {
        if (this.$$set && !is_empty($$props)) {
            this.$$.skip_bound = true;
            this.$$set($$props);
            this.$$.skip_bound = false;
        }
    }
}

/* src\Components\QueryModal.svelte generated by Svelte v3.35.0 */

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[10] = list[i];
	return child_ctx;
}

// (28:2) {#each plugin.settings.savedQueries as savedQ}
function create_each_block(ctx) {
	let div;
	let span0;
	let t0_value = /*savedQ*/ ctx[10].name + "";
	let t0;
	let t1;
	let span1;
	let t3;
	let span2;
	let t4_value = /*savedQ*/ ctx[10].query + "";
	let t4;
	let t5;
	let mounted;
	let dispose;

	return {
		c() {
			div = element("div");
			span0 = element("span");
			t0 = text(t0_value);
			t1 = space();
			span1 = element("span");
			span1.textContent = "→";
			t3 = space();
			span2 = element("span");
			t4 = text(t4_value);
			t5 = space();
			attr(span0, "class", "savedQ-name");
			attr(span2, "class", "savedQ-query");
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, span0);
			append(span0, t0);
			append(div, t1);
			append(div, span1);
			append(div, t3);
			append(div, span2);
			append(span2, t4);
			append(div, t5);

			if (!mounted) {
				dispose = [
					listen(span0, "click", /*click_handler_1*/ ctx[7]),
					listen(span2, "click", /*click_handler_2*/ ctx[8])
				];

				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (dirty & /*plugin*/ 2 && t0_value !== (t0_value = /*savedQ*/ ctx[10].name + "")) set_data(t0, t0_value);
			if (dirty & /*plugin*/ 2 && t4_value !== (t4_value = /*savedQ*/ ctx[10].query + "")) set_data(t4, t4_value);
		},
		d(detaching) {
			if (detaching) detach(div);
			mounted = false;
			run_all(dispose);
		}
	};
}

function create_fragment(ctx) {
	let div0;
	let input0;
	let t0;
	let button;
	let t2;
	let input1;
	let t3;
	let label;
	let t5;
	let div1;
	let mounted;
	let dispose;
	let each_value = /*plugin*/ ctx[1].settings.savedQueries;
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	return {
		c() {
			div0 = element("div");
			input0 = element("input");
			t0 = space();
			button = element("button");
			button.textContent = "Submit";
			t2 = space();
			input1 = element("input");
			t3 = space();
			label = element("label");
			label.textContent = "Regex?";
			t5 = space();
			div1 = element("div");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			attr(input0, "type", "text");
			attr(input0, "placeholder", "Search Query");
			attr(input1, "type", "checkbox");
			attr(input1, "name", "regexQ");
			input1.checked = true;
			attr(label, "for", "regexQ");
			attr(div0, "class", "inputEls");
			attr(div1, "class", "savedQ");
		},
		m(target, anchor) {
			insert(target, div0, anchor);
			append(div0, input0);
			/*input0_binding*/ ctx[4](input0);
			append(div0, t0);
			append(div0, button);
			append(div0, t2);
			append(div0, input1);
			/*input1_binding*/ ctx[6](input1);
			append(div0, t3);
			append(div0, label);
			insert(target, t5, anchor);
			insert(target, div1, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div1, null);
			}

			if (!mounted) {
				dispose = listen(button, "click", /*click_handler*/ ctx[5]);
				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (dirty & /*console, modal, regexQEl, plugin*/ 11) {
				each_value = /*plugin*/ ctx[1].settings.savedQueries;
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(div1, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(div0);
			/*input0_binding*/ ctx[4](null);
			/*input1_binding*/ ctx[6](null);
			if (detaching) detach(t5);
			if (detaching) detach(div1);
			destroy_each(each_blocks, detaching);
			mounted = false;
			dispose();
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	
	
	let { modal } = $$props;
	let { plugin } = $$props;
	let inputEl;
	let regexQEl;
	onMount(() => inputEl.focus());

	function input0_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			inputEl = $$value;
			$$invalidate(2, inputEl);
		});
	}

	const click_handler = async () => {
		const query = inputEl.value;
		console.log({ query });
		const { selection, offset } = await modal.getSelectionAndOffset();
		modal.submit(query, selection, offset, regexQEl.checked);
	};

	function input1_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			regexQEl = $$value;
			$$invalidate(3, regexQEl);
		});
	}

	const click_handler_1 = async e => {
		console.log(e);
		const name = e.target.textContent;
		const { query } = plugin.settings.savedQueries.find(savedQ => savedQ.name === name);
		console.log({ query });
		const { selection, offset } = await modal.getSelectionAndOffset();
		modal.submit(query, selection, offset, regexQEl.checked);
	};

	const click_handler_2 = async e => {
		console.log(e);
		const query = e.target.textContent;
		console.log({ query });
		const { selection, offset } = await modal.getSelectionAndOffset();
		modal.submit(query, selection, offset, regexQEl.checked);
	};

	$$self.$$set = $$props => {
		if ("modal" in $$props) $$invalidate(0, modal = $$props.modal);
		if ("plugin" in $$props) $$invalidate(1, plugin = $$props.plugin);
	};

	return [
		modal,
		plugin,
		inputEl,
		regexQEl,
		input0_binding,
		click_handler,
		input1_binding,
		click_handler_1,
		click_handler_2
	];
}

class QueryModal extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, { modal: 0, plugin: 1 });
	}
}

class CursorsModal extends obsidian.Modal {
    constructor(app, editor, plugin) {
        super(app);
        this.submit = (query, selection, offset, regexQ) => {
            try {
                const selections = this.getSelectionsFromQuery(selection, offset, query, regexQ);
                console.log({ selections });
                new obsidian.Notice(`${selections.length} matches found.`);
                this.editor.setSelections(selections);
                this.close();
            }
            catch (error) {
                console.log(error);
                new obsidian.Notice("Something went wrong, check the console for the error.");
            }
        };
        this.editor = editor;
        this.plugin = plugin;
    }
    getSelectionAndOffset() {
        return __awaiter(this, void 0, void 0, function* () {
            const selection = this.editor.getSelection();
            const offset = this.editor.getCursor("from").line;
            if (selection !== "") {
                return { selection, offset };
            }
            else {
                const currFile = this.app.workspace.getActiveFile();
                const content = yield this.app.vault.cachedRead(currFile);
                return { selection: content, offset: 0 };
            }
        });
    }
    getSelectionsFromQuery(content, offset, query, regexQ) {
        let regex;
        if (regexQ) {
            regex = new RegExp(query, "g");
        }
        else {
            regex = new RegExp(query.replace(/[-\/\\^$*+?.()|[\]{}]/g, "\\$&"), "g");
        }
        const lines = content.split("\n");
        const selections = [];
        lines.forEach((line, i) => {
            const matches = line.matchAll(regex);
            const matchesArr = [...matches];
            matchesArr.forEach((matchArr) => {
                const from = matchArr.index;
                if (from !== undefined) {
                    const anchor = {
                        ch: from,
                        line: i + offset,
                    };
                    const head = {
                        ch: from + matchArr[0].length,
                        line: i + offset,
                    };
                    selections.push({ anchor, head });
                }
            });
        });
        return selections;
    }
    onOpen() {
        return __awaiter(this, void 0, void 0, function* () {
            let { contentEl } = this;
            new QueryModal({
                target: contentEl,
                props: { modal: this, plugin: this.plugin },
            });
        });
    }
    onClose() {
        let { contentEl } = this;
        contentEl.empty();
    }
}

class SettingTab extends obsidian.PluginSettingTab {
    constructor(app, plugin) {
        super(app, plugin);
        this.initExistingSavedQs = (savedQsDiv) => {
            savedQsDiv.empty();
            this.plugin.settings.savedQueries.forEach((savedQ, i) => {
                const savedQDiv = savedQsDiv.createDiv({ cls: "savedQ" });
                savedQDiv.createSpan({ text: savedQ.name, cls: "savedQ-name" });
                savedQDiv.createSpan({ text: " → " });
                savedQDiv.createSpan({ text: savedQ.query });
                const deleteQ = savedQDiv.createEl("button", {
                    text: "X",
                    cls: "deleteQButton",
                });
                deleteQ.addEventListener("click", () => __awaiter(this, void 0, void 0, function* () {
                    savedQDiv.remove();
                    this.removeSavedQ(i);
                }));
            });
        };
        this.removeSavedQ = (i) => __awaiter(this, void 0, void 0, function* () {
            const { settings } = this.plugin;
            const copy = [...settings.savedQueries];
            const removedQ = copy.splice(i, 1);
            settings.savedQueries = copy;
            yield this.plugin.saveSettings();
            console.log(settings.savedQueries, copy);
            const { name, query } = removedQ[0];
            this.app.commands.removeCommand(`advanced-cursors:AC-${name}: ${query}`);
        });
        this.plugin = plugin;
    }
    display() {
        let { containerEl } = this;
        this.plugin;
        containerEl.empty();
        containerEl.createEl("button", { text: "Add Query" }, (but) => {
            but.addEventListener("click", () => {
                console.log("clicked");
                new AddQModal(this.app, this.plugin, this, savedQsDiv).open();
            });
        });
        const savedQsDiv = containerEl.createDiv({ cls: "savedQs" });
        this.initExistingSavedQs(savedQsDiv);
    }
}
class AddQModal extends obsidian.Modal {
    constructor(app, plugin, settingsTab, savedQsDiv) {
        super(app);
        this.plugin = plugin;
        this.settingsTab = settingsTab;
        this.savedQsDiv = savedQsDiv;
    }
    onOpen() {
        return __awaiter(this, void 0, void 0, function* () {
            let { contentEl } = this;
            const { savedQueries } = this.plugin.settings;
            const nameEl = contentEl.createEl("input", {
                type: "text",
                attr: { placeholder: "name" },
            });
            const queryEl = contentEl.createEl("input", {
                type: "text",
                attr: { placeholder: "query" },
            });
            contentEl
                .createDiv()
                .createEl("button", { text: "Add new query" }, (but) => {
                but.addEventListener("click", () => __awaiter(this, void 0, void 0, function* () {
                    const name = nameEl.value;
                    const query = queryEl.value;
                    if (savedQueries.findIndex((q) => q.name === name) > -1) {
                        new obsidian.Notice(`A query with name: ${name} already exists`);
                    }
                    else {
                        this.plugin.settings.savedQueries.push({
                            name,
                            query,
                        });
                        yield this.plugin.saveSettings();
                        console.log(this.plugin.settings.savedQueries);
                        new obsidian.Notice(`${name}: ${query} added.`);
                        this.settingsTab.initExistingSavedQs(this.savedQsDiv);
                        this.plugin.addCommand({
                            id: `AC-${name}: ${query}`,
                            name: `Run query: ${name} → ${query}`,
                            editorCallback: (editor) => __awaiter(this, void 0, void 0, function* () {
                                const cursorModal = new CursorsModal(this.app, editor, this.plugin);
                                const { selection, offset } = yield cursorModal.getSelectionAndOffset();
                                cursorModal.submit(query, selection, offset, true);
                            }),
                        });
                        this.close();
                    }
                }));
            });
        });
    }
    onClose() {
        let { contentEl } = this;
        contentEl.empty();
    }
}

const DEFAULT_SETTINGS = {
    savedQueries: [{ name: "name", query: "query" }],
};
class MyPlugin extends obsidian.Plugin {
    onload() {
        return __awaiter(this, void 0, void 0, function* () {
            console.log("Loading advanced cursors");
            yield this.loadSettings();
            this.addCommand({
                id: "open-regex-match-modal",
                name: "Open Regex Match Modal",
                editorCallback: (editor) => {
                    new CursorsModal(this.app, editor, this).open();
                },
            });
            this.settings.savedQueries.forEach((savedQ) => {
                const { name, query } = savedQ;
                this.addCommand({
                    id: `AC-${name}: ${query}`,
                    name: `Run query: ${name} → ${query}`,
                    editorCallback: (editor) => __awaiter(this, void 0, void 0, function* () {
                        const cursorModal = new CursorsModal(this.app, editor, this);
                        const { selection, offset } = yield cursorModal.getSelectionAndOffset();
                        cursorModal.submit(query, selection, offset, true);
                    }),
                });
            });
            this.addCommand({
                id: "move-to-next-match",
                name: "Move to next instance of current selection",
                editorCallback: (editor) => __awaiter(this, void 0, void 0, function* () {
                    this.selectNextInstance(editor);
                }),
            });
            this.addCommand({
                id: "add-next-match-to-selections",
                name: "Add next instance of current selection to selections",
                editorCallback: (editor) => __awaiter(this, void 0, void 0, function* () {
                    this.selectNextInstance(editor, true);
                }),
            });
            this.addSettingTab(new SettingTab(this.app, this));
        });
    }
    selectNextInstance(editor, appendQ = false) {
        return __awaiter(this, void 0, void 0, function* () {
            const currFile = this.app.workspace.getActiveFile();
            const content = yield this.app.vault.read(currFile);
            // const currSelection = editor.getSelection();
            const lastSelection = editor.listSelections().last();
            const currSelection = editor.getRange(lastSelection.anchor, lastSelection.head);
            const currOffset = editor.posToOffset(lastSelection.head);
            const nextI = content.indexOf(currSelection, currOffset);
            console.log({ currOffset, nextI });
            if (nextI > -1) {
                const { line, ch } = editor.offsetToPos(nextI);
                const anchor = {
                    ch,
                    line,
                };
                const head = {
                    ch: ch + currSelection.length,
                    line,
                };
                if (appendQ) {
                    const currSelections = editor.listSelections();
                    const reconstructedSelections = this.reconstructCurrentSelections(currSelections);
                    reconstructedSelections.push({ anchor, head });
                    editor.setSelections(reconstructedSelections);
                }
                else {
                    editor.setSelections([{ anchor, head }]);
                }
            }
            else {
                new obsidian.Notice(`Cannot find next instance of ${currSelection}`);
            }
        });
    }
    reconstructCurrentSelections(selections) {
        const newSelections = [];
        selections.forEach((selection) => {
            newSelections.push({
                anchor: selection.anchor,
                head: selection.head,
            });
        });
        return newSelections;
    }
    onunload() { }
    loadSettings() {
        return __awaiter(this, void 0, void 0, function* () {
            this.settings = Object.assign({}, DEFAULT_SETTINGS, yield this.loadData());
        });
    }
    saveSettings() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.saveData(this.settings);
        });
    }
}

module.exports = MyPlugin;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
